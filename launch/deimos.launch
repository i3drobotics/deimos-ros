<?xml version="1.0"?>
<!--XML-->
<launch>
    <!-- SETUP ARGUMENTS -->
    <!-- algorithm 0: OpenCV block -->
    <!-- algorithm 1: OpenCV SGBM -->
    <!-- algorithm 2: I3DR SGM -->
    <arg name="stereo_algorithm" default="2" />
    <!-- enable/disable rviz -->
    <arg name="rviz" default="false" />
    <!-- enable/disable calibration -->
    <arg name="calibrate" default="false"/>
    <!-- namespace for camera -->
    <arg name="camera_namespace" default="i3dr_deimos"/>
    <!-- enable/disable stereo matching (3D generation) -->
    <arg name="stereo_match" default="true"/>
    <!-- set this to your camera_serial (this will be used to choose the right calibration files)-->
    <arg name="camera_serial" default="001023"/>
    <arg name="imu" default="true" />
    <!-- enable/disable mapping with rtabmap -->
    <arg name="map" default="false" />
    <!-- maximum distance for depth map -->
    <arg name="depth_max" default="5" />
    <!-- maximum distance for point cloud -->
    <arg name="z_max" default="5" />
    <!-- enable/disable stereo gui (beta)-->
    <arg name="gui" default="false" />

    <!-- mapping settings -->
    <!-- crop input image by disparity -->
    <arg name="cropByDisp" default="false" />
    <!-- delete map database on start -->
    <arg name="clearMapOnStart" default="true" />
    <!-- path to rtabmap database -->
    <arg name="database_path" default="~/.ros/rtabmap.db" />
    <!-- localization mode for mapping (true: map, false: localise)-->
    <arg name="localization" default="false" />

    <!-- camera calibration files -->
    <arg name="cameraLeft_info_url"  default="file://$(find i3dr_deimos)/calibration/$(arg camera_serial)/deimos_left.yaml" />
    <arg name="cameraRight_info_url" default="file://$(find i3dr_deimos)/calibration/$(arg camera_serial)/deimos_right.yaml" />
    
    <!-- this should not change as it is the namespace of frames in the urdf-->
    <arg name="camera_model" default="deimos"/>
    <arg name="urdf_namespace" default="$(arg camera_namespace)"/>
  
    <!-- SETUP ROBOT MODEL -->
    <arg name="imu_urdf" default="false" />
    <param name="$(arg urdf_namespace)_robot_description" command="$(find xacro)/xacro '$(find i3dr_deimos)/urdf/deimos_scene.urdf.xacro' en_imu:=$(arg imu_urdf) camera_name:=$(arg urdf_namespace)" />
    <node name="robot_state_publisher_deimos" pkg="robot_state_publisher" type="state_publisher">
        <remap from="robot_description" to="$(arg urdf_namespace)_robot_description"/>
    </node>

    <!-- STEREO CAPTURE -->
    <include unless="$(arg external_capture)" file="$(find i3dr_deimos)/launch/deimos_capture.launch">
        <arg name="camera_namespace" value="$(arg camera_namespace)"/>
        <!-- choose which usb dev port the camera is attached to -->
        <arg name="device" value="/dev/video0"/>
        <!-- adjust the camera exposure -->
        <arg name="exposure" value="5000" />
        <arg name="frame_id" value="$(arg urdf_namespace)_depth_optical_frame" />
        <arg name="cameraLeft_info_url"  value="$(arg cameraLeft_info_url)" />
        <arg name="cameraRight_info_url" value="$(arg cameraRight_info_url)" />
    </include>

    <!-- STEREO CALIBRATION -->
    <include if="$(arg calibrate)" file="$(find i3dr_stereo_camera)/launch/stereo_calibration.launch">
        <arg name="camera_namespace" value="$(arg camera_namespace)"/>
        <arg name="multi_board" value="false" />
        <arg name="grid_rows" value="8" />
    </include>

    <!-- STEREO MATCHER -->
    <include if="$(arg stereo_match)" file="$(find i3dr_stereo_camera)/launch/stereo_matcher.launch">
        <arg name="cropByDisp" value="$(arg cropByDisp)"/>

        <!-- Matcher Parameters -->
        <!-- see link below for details on matcher parameters -->
        <!-- http://wiki.ros.org/stereo_image_proc/Tutorials/ChoosingGoodStereoParameters -->
        <!-- algorithm 0: OpenCV block -->
        <!-- algorithm 1: OpenCV SGBM -->
        <!-- algorithm 2: I3DR SGM -->
        <arg name="stereo_algorithm" value="$(arg stereo_algorithm)" />

        <!-- maximum distance for depth map -->
        <arg name="depth_max" value="$(arg depth_max)" />
        <!-- maximum distance for point cloud -->
        <arg name="z_max" value="$(arg z_max)" />
        <!-- minimum distance for depth map -->
        <!--<arg name="depth_min" value="0" />-->
        <!-- minimum distance for point cloud -->
        <!--<arg name="z_min" value="0" />-->

        <arg name="camera_namespace" value="$(arg camera_namespace)"/>
        <arg name="frame_id" value="$(arg urdf_namespace)_depth_optical_frame" />
        <arg name="split_laser" value="false" />

        <!-- tested good matcher parameters for deimos -->
        <arg if="$(eval stereo_algorithm == 0)" name="correlation_window_size" value="13" />
        <arg if="$(eval stereo_algorithm == 0)" name="min_disparity" value="0" />
        <arg if="$(eval stereo_algorithm == 0)" name="disparity_range" value="80" />
        <arg if="$(eval stereo_algorithm == 1)" name="correlation_window_size" value="13" />
        <arg if="$(eval stereo_algorithm == 1)" name="min_disparity" value="0" />
        <arg if="$(eval stereo_algorithm == 1)" name="disparity_range" value="80" />
        <arg if="$(eval stereo_algorithm == 2)" name="correlation_window_size" value="5" />
        <arg if="$(eval stereo_algorithm == 2)" name="min_disparity" value="500" />
        <arg if="$(eval stereo_algorithm == 2)" name="disparity_range" value="530" />
        <arg if="$(eval stereo_algorithm == 2)" name="prefilter_cap" value="5" />
        <arg if="$(eval stereo_algorithm == 2)" name="interp" value="false"/>
    </include>

    <node if="$(arg imu)" name="$(arg camera_namespace)_imu_filter" pkg="imu_filter_madgwick" type="imu_filter_node" output="screen">
        <!-- no magnetometer on deimos -->
        <param name="use_mag" value="false"/>
        <!-- publish imu data in camera namspace -->
        <remap from="/imu/data_raw" to="/$(arg camera_namespace)/imu/data_raw"/>
        <!-- only publish tf when mapping is off -->
        <param name="publish_tf" type="bool" value="$(eval arg('map')==0)" />
        <param name="world_frame" type="string" value="nwu" />
    </node>
    
    <!-- use image cropped by disparity for mapping if enabled -->
    <arg if="$(eval arg('cropByDisp'))" name="rgb_topic" default="/$(arg camera_namespace)/left/image_rect_disp_cropped"/>
    <arg unless="$(eval arg('cropByDisp'))" name="rgb_topic" default="/$(arg camera_namespace)/left/image_rect"/>

    <group if="$(arg map)">
        <!-- frame for map -->
        <arg name="map_frame_id" default="scan" />
        <!-- map grid resolution -->
        <arg name="map_resolution" default="0.001"/>
        <include if="$(arg map)" file="$(find i3dr_rtabmap)/launch/standalone_rtabmap.launch">
            <arg name="rgb_topic" value="$(arg rgb_topic)"/>
            <arg name="camera_en" value="false"/>
            <arg name="camera_namespace" value="$(arg camera_namespace)"/>
            <arg name="camera_model" value="$(arg camera_model)"/>
            <arg name="urdf_namespace" value="$(arg urdf_namespace)"/>
            <arg name="rviz" value="$(arg rviz)" />
            <arg name="map_frame_id" value="$(arg map_frame_id)"/>
            <arg name="grid_size" value="$(arg map_resolution)" />
            <arg name="imu" value="$(arg imu)" />
            <arg name="gftt_min_dist" value="5"/>
            <arg name="max_depth" value="$(arg depth_max)"/>
            <arg name="use_compressed" value="false"/>
            <arg name="clearMapOnStart" value="$(arg clearMapOnStart)"/>
            <arg name="database_path" value="$(arg database_path)" />
            <arg name="localization" value="$(arg localization)"/>
        </include>
    </group>

    <!-- rviz to use when mapping is off (otherwise rviz is run from inside 'standalone_rtabmap') -->
    <group unless="$(arg map)">
        <node if="$(arg rviz)" pkg="rviz" type="rviz" name="rivz" 
            args="-d $(find i3dr_deimos)/rviz/scene.rviz"/>
    </group>

    <!-- stereo camera gui (beta) -->
    <node if="$(arg gui)" pkg="i3dr_stereo_camera" type="stereo_gui" name="$(anon stereo_gui)" ns="$(arg camera_namespace)" output="screen"/>

</launch>